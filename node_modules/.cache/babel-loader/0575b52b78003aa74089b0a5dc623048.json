{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport queryApi from \"../utils/queryApi\";\n/**\n * @param {String} endpoint relative endpoint\n * @param {object} body request body\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default\n GET\n * @param {boolean} transformBody whether to transform the request body from JSON\n to FormData | Default false\n */\n\nexport default function useApi(endpoint, body = null, method = \"GET\", transformBody = false) {\n  _s();\n\n  // Create state values\n  // result, error and the body we will send\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const [bodyUsed, setBodyUsed] = useState(body); // query that will call the queryApi function, takes only a new body argument (\n  //optional)\n\n  async function query(newBody) {\n    if (newBody) setBodyUsed(newBody); // If the endpoint is empty return an empty value\n\n    if (!endpoint) return;\n    setError(false);\n    setResult(null); // Normal call to queryApi, deconstructed into result and error\n\n    const [res, err] = await queryApi(endpoint, bodyUsed, method, transformBody);\n    setResult(res);\n    setError(err);\n  } // On hook init call the query once with initial arguments\n\n\n  useEffect(() => {\n    query(); // eslint-disable-next-line\n  }, []); // Deconstruct the hook into result, error and a function that can update the h\n  //ook\n\n  return [result, error, query];\n}\n\n_s(useApi, \"4fwKu2mD1ebmInWY0I7lmBNojeY=\");","map":{"version":3,"sources":["C:/Users/skand/Desktop/ForkStack-onlineWardrobe/Front-end/src/Hooks/useApi.js"],"names":["useState","useEffect","queryApi","useApi","endpoint","body","method","transformBody","result","setResult","error","setError","bodyUsed","setBodyUsed","query","newBody","res","err"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAsB,mBAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,MAAT,CACXC,QADW,EAEXC,IAAI,GAAG,IAFI,EAGXC,MAAM,GAAG,KAHE,EAIXC,aAAa,GAAG,KAJL,EAKb;AAAA;;AACD;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAACK,IAAD,CAAxC,CALC,CAMD;AACD;;AACC,iBAAeS,KAAf,CAAqBC,OAArB,EAA8B;AAC7B,QAAIA,OAAJ,EAAaF,WAAW,CAACE,OAAD,CAAX,CADgB,CAE7B;;AACA,QAAI,CAACX,QAAL,EAAe;AACfO,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,SAAS,CAAC,IAAD,CAAT,CAL6B,CAM7B;;AACA,UAAM,CAACO,GAAD,EAAMC,GAAN,IAAa,MAAMf,QAAQ,CAC7BE,QAD6B,EAE7BQ,QAF6B,EAG7BN,MAH6B,EAI7BC,aAJ6B,CAAjC;AAMAE,IAAAA,SAAS,CAACO,GAAD,CAAT;AACAL,IAAAA,QAAQ,CAACM,GAAD,CAAR;AACA,GAvBA,CAwBD;;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACfa,IAAAA,KAAK,GADU,CAEf;AACA,GAHQ,EAGN,EAHM,CAAT,CAzBC,CA6BD;AACA;;AACA,SAAO,CAACN,MAAD,EAASE,KAAT,EAAgBI,KAAhB,CAAP;AACA;;GArCuBX,M","sourcesContent":["import { useState, useEffect } from \"react\";\nimport queryApi  from \"../utils/queryApi\";\n/**\n * @param {String} endpoint relative endpoint\n * @param {object} body request body\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default\n GET\n * @param {boolean} transformBody whether to transform the request body from JSON\n to FormData | Default false\n */\nexport default function useApi(\n    endpoint,\n    body = null,\n    method = \"GET\",\n    transformBody = false\n) {\n // Create state values\n // result, error and the body we will send\n const [result, setResult] = useState(null);\n const [error, setError] = useState(null);\n const [bodyUsed, setBodyUsed] = useState(body);\n // query that will call the queryApi function, takes only a new body argument (\n//optional)\n async function query(newBody) {\n  if (newBody) setBodyUsed(newBody);\n  // If the endpoint is empty return an empty value\n  if (!endpoint) return;\n  setError(false);\n  setResult(null);\n  // Normal call to queryApi, deconstructed into result and error\n  const [res, err] = await queryApi(\n      endpoint,\n      bodyUsed,\n      method,\n      transformBody\n  );\n  setResult(res);\n  setError(err);\n }\n // On hook init call the query once with initial arguments\n useEffect(() => {\n  query();\n  // eslint-disable-next-line\n }, []);\n // Deconstruct the hook into result, error and a function that can update the h\n //ook\n return [result, error, query];\n}\n   "]},"metadata":{},"sourceType":"module"}