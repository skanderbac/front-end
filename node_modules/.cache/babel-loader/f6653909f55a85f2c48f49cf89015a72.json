{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport queryApi from \"../../utils/queryApi\";\nlet initialState = {\n  products: [],\n  selectedProduct: {},\n  errors: \"\"\n};\nconst productsSlice = createSlice({\n  name: \"products\",\n  initialState,\n  reducers: {\n    populateProducts(state, action) {\n      state.products = action.payload;\n    },\n\n    selectProduct(state, action) {\n      state.selectedProduct = action.payload;\n    },\n\n    unselectProduct(state) {\n      state.selectedProduct = null;\n    },\n\n    deleteProduct: (state, action) => {\n      const payload = action.payload;\n      const index = state.products.findIndex(item => item._id === payload);\n\n      if (index !== -1) {\n        state.products.splice(index, 1);\n      }\n    },\n    updateProduct: (state, action) => {\n      const payload = action.payload;\n      const index = state.products.findIndex(item => item._id === payload._id);\n\n      if (index !== -1) {\n        state.products[index] = payload;\n      }\n    },\n    addProduct: (state, action) => {\n      const payload = action.payload;\n      state.products.push(payload);\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchProducts = () => async dispatch => {\n  const [res, error] = await queryApi(\"type\");\n\n  if (error) {\n    dispatch(setErrors(error));\n  } else {\n    dispatch(populateProducts(res));\n  }\n};\nexport const selectProducts = state => {\n  return state.products.products;\n};\nexport const selectSelectedProduct = state => {\n  return state.products.selectedProduct;\n};\nexport const {\n  populateProducts,\n  selectProduct,\n  unselectProduct,\n  setErrors,\n  deleteProduct,\n  updateProduct,\n  addProduct\n} = productsSlice.actions;\nexport default productsSlice.reducer;","map":{"version":3,"sources":["C:/Users/skand/Desktop/ForkStack-onlineWardrobe/Front-end/src/Redux/slices/ProductSlice.js"],"names":["createSlice","queryApi","initialState","products","selectedProduct","errors","productsSlice","name","reducers","populateProducts","state","action","payload","selectProduct","unselectProduct","deleteProduct","index","findIndex","item","_id","splice","updateProduct","addProduct","push","setErrors","fetchProducts","dispatch","res","error","selectProducts","selectSelectedProduct","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport  queryApi  from \"../../utils/queryApi\";\nlet initialState = {\n    products: [],\n    selectedProduct: {},\n    errors: \"\",\n};\nconst productsSlice = createSlice({\n    name: \"products\",\n    initialState,\n    reducers: {\n        populateProducts(state, action) {\n            state.products = action.payload;\n        },\n        selectProduct(state, action) {\n            state.selectedProduct = action.payload;\n        },\n        unselectProduct(state) {\n            state.selectedProduct = null;\n        },\n        deleteProduct: (state, action) => {\n            const payload = action.payload;\n            const index = state.products.findIndex((item) => item._id === payload);\n            if (index !== -1) {\n                state.products.splice(index, 1);\n            }\n        },\n        updateProduct: (state, action) => {\n            const payload = action.payload;\n            const index = state.products.findIndex(\n                (item) => item._id === payload._id\n            );\n            if (index !== -1) {\n                state.products[index] = payload;\n            }\n        },\n        addProduct: (state, action) => {\n            const payload = action.payload;\n            state.products.push(payload);\n        },\n        setErrors(state, action) {\n            state.errors = action.payload;\n        },\n    },\n});\nexport const fetchProducts = () => async (dispatch) => {\n    const [res, error] = await queryApi(\"type\");\n    if (error) {\n        dispatch(setErrors(error));\n    } else {\n        dispatch(populateProducts(res));\n    }\n};\nexport const selectProducts = (state) => {\n    return state.products.products;\n};\nexport const selectSelectedProduct = (state) => {\n    return state.products.selectedProduct;\n};\nexport const {\n    populateProducts,\n    selectProduct,\n    unselectProduct,\n    setErrors,\n    deleteProduct,\n    updateProduct,\n    addProduct,\n} = productsSlice.actions;\nexport default productsSlice.reducer;\n\n"]},"metadata":{},"sourceType":"module"}