{"ast":null,"code":"import api from \"./api\";\n/**\n * @param {String} endpoint relative endpoint\n * @param {object} body request body\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default\n GET\n * @param {boolean} transformBody whether to transform the request body from JSON\n to FormData | Default false\n */\n\nexport default async function queryApi(endpoint, body = null, method = \"GET\", transformBody = false) {\n  let error = null;\n  let result = null;\n\n  try {\n    //Create our config, with the method as the method passed and the new endpoin\n    // t\n    let config = {\n      method,\n      url: `${process.env.REACT_APP_API_URL}/${endpoint}`\n    };\n\n    if (body) {\n      // If we have a body and the method is GET, the config is the following\n      if (method.toUpperCase() === \"GET\") config = { ...config,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: body\n      };\n\n      if ([\"POST\", \"PUT\", \"PATCH\"].includes(method.toUpperCase())) {\n        if (transformBody) {\n          // If our method is POST, PUT or PATCH, and we have to transform our bo\n          //dy to Form Data (for files upload for example)\n          // transform body object to form data entries\n          let bodyFormData = new FormData();\n\n          for (let [key, value] of Object.entries(body)) {\n            if (value) {\n              if (Array.isArray(value)) value.forEach(v => bodyFormData.append(key, v));else bodyFormData.append(key, value);\n            }\n          } // Change the config to the following\n\n\n          config = { ...config,\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            },\n            data: bodyFormData\n          };\n        } else {\n          // If not keep the content type json and the body will be parsed automa\n          // tically to json\n          config = { ...config,\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            data: body\n          };\n        }\n      }\n    } // Setting authorization token if available with each request\n    // This example uses localStorage, feel free to change it to cookie storage o\n    //r something else.\n\n\n    const token = sessionStorage.getItem(\"user\"); // if (token)\n\n    config.headers = { ...config.headers,\n      Authorization: `${token}`\n    };\n    console.log(`Requesting : ${config.url}`);\n    console.log(config.headers);\n    const res = await api(config);\n    result = res.data;\n  } catch (e) {\n    // To differentiate between validation errors and response errors,\n    // check whether the \"errors\" key is defined or not in the returned error fro\n    //m this function.\n    if (e.response) {\n      // The request was made and the server responded with a status code that fa\n      //lls out of the range of 2xx\n      error = e.response.data; // console.log(e.message);\n      // console.log(error);\n    } else {\n      // 1) The request was made but no response was received\n      // OR\n      // 2) Something went wrong in setting up the request that triggered an Erro\n      // r\n      // console.log(e.request);\n      // console.log(e.message);\n      error = e.message;\n    }\n  }\n\n  return [result, error];\n}","map":{"version":3,"sources":["C:/Users/skand/Desktop/ForkStack-onlineWardrobe/Front-end/src/utils/queryApi.js"],"names":["api","queryApi","endpoint","body","method","transformBody","error","result","config","url","process","env","REACT_APP_API_URL","toUpperCase","headers","data","includes","bodyFormData","FormData","key","value","Object","entries","Array","isArray","forEach","v","append","token","sessionStorage","getItem","Authorization","console","log","res","e","response","message"],"mappings":"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","sourcesContent":["import api from \"./api\";\n/**\n * @param {String} endpoint relative endpoint\n * @param {object} body request body\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default\n GET\n * @param {boolean} transformBody whether to transform the request body from JSON\n to FormData | Default false\n */\nexport default async function queryApi(\n    endpoint,\n    body = null,\n    method = \"GET\",\n    transformBody = false\n) {\n let error = null;\n let result = null;\n try {\n//Create our config, with the method as the method passed and the new endpoin\n  // t\n  let config = {\n   method,\n   url: `${process.env.REACT_APP_API_URL}/${endpoint}`,\n  };\n  if (body) {\n// If we have a body and the method is GET, the config is the following\n   if (method.toUpperCase() === \"GET\")\n    config = {\n     ...config,\n     headers: { \"Content-Type\": \"application/json\" },\n     data: body,\n    };\n   if ([\"POST\", \"PUT\", \"PATCH\"].includes(method.toUpperCase())) {\n    if (transformBody) {\n// If our method is POST, PUT or PATCH, and we have to transform our bo\n     //dy to Form Data (for files upload for example)\n// transform body object to form data entries\n     let bodyFormData = new FormData();\n     for (let [key, value] of Object.entries(body)) {\n      if (value) {\n       if (Array.isArray(value))\n        value.forEach((v) => bodyFormData.append(key, v));\n       else bodyFormData.append(key, value);\n      }\n     }\n// Change the config to the following\n     config = {\n      ...config,\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n      data: bodyFormData,\n     };\n    } else {\n// If not keep the content type json and the body will be parsed automa\n     // tically to json\n     config = {\n      ...config,\n      headers: { \"Content-Type\": \"application/json\" },\n      data: body,\n     };\n    }\n   }\n  }\n// Setting authorization token if available with each request\n// This example uses localStorage, feel free to change it to cookie storage o\n  //r something else.\n const token = sessionStorage.getItem(\"user\");\n// if (token)\n config.headers = { ...config.headers, Authorization:`${token}` }\n  ;\n console.log(`Requesting : ${config.url}`)\nconsole.log(config.headers);\n  const res = await api(config);\n  result = res.data;\n } catch (e) {\n// To differentiate between validation errors and response errors,\n// check whether the \"errors\" key is defined or not in the returned error fro\n  //m this function.\n  if (e.response) {\n// The request was made and the server responded with a status code that fa\n   //lls out of the range of 2xx\n   error = e.response.data;\n// console.log(e.message);\n// console.log(error);\n  } else {\n// 1) The request was made but no response was received\n// OR\n// 2) Something went wrong in setting up the request that triggered an Erro\n   // r\n// console.log(e.request);\n// console.log(e.message);\n   error = e.message;\n  }\n }\n return [result, error];\n}"]},"metadata":{},"sourceType":"module"}